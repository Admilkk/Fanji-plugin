//import cm from '../lib/common/CM.js';
import fetch from 'node-fetch';
export class fangtiancai extends plugin {
  constructor() {
    super({
      name: '黑名单检测',
      dsc: '后门黑名单',
      event: 'message',
      priority: -Infinity,
      rule: [
	          {
		reg: '^#?获取黑名单$',
          fnc: 'getlist',
        },
        {
        reg: '^#检测黑名单$',
        fnc: 'checkuser',
        }
      ],
    });
  }
async getlist() {
    let res = await fetch(`https://api.admilk.top/api.php`);
    let data = await res.json();
    await redis.set('lastFetchtoadmilkTime', Date.now().toString());
    await redis.set('blacklist', JSON.stringify(data.black));
}

async checkuser(e) {
    // 从 Redis 中获取上次获取黑名单数据的时间戳
    let lastFetchTime = await redis.get('lastFetchtoadmilkTime');
    // 如果没有获取过数据或者超过了 5 分钟，则向 API 请求新的黑名单数据
    if (!lastFetchTime || Date.now() - parseInt(lastFetchTime) > 5 * 60 * 1000) {
        await this.getlist();
    }

    let blacklist = await redis.get('blacklist');
    blacklist = JSON.parse(blacklist);
    let qh = []
    for (let aw of Bot.gl.keys()) {
        let member = await Bot.pickGroup(aw).getMemberMap();
        member.forEach(async item => {
            if (blacklist.includes(item.user_id.toString())) {
                let ist = await Bot.setGroupKick(aw, item.user_id); 
                if (ist) {
                    qh.push([`${aw},踢出`])
                }
            }
        });
    }
    await this.reply('处理完成');
    await this.reply(this.e.runtime.common.makeForwardMsg(this.e, qh, '诶嘿嘿'));
    return false;
}



}







/* async jiejin(e){
	if (await this.checkuser(e)){
		return true
	}else{
		return false
	}
}
	 

  async jiejin(e) {
    if (e.at && await this.checkuser(e.at, e)) {
      return true;
    } else {
      if (/出脚本|tcjb/i.test(e.nickname)) {
        return true;
      } else {
        if (e.isGroup) {
          if (/出脚本|tcjb/i.test(e.member.card)) {
            return true;
          }
        }
      }
    }
    logger.info('不拦截');
    return false;
  }  */